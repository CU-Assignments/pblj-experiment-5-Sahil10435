1. Create a Java program to serialize and deserialize a Student object. The program should:
Serialize a Student object (containing id, name, and GPA) and save it to a file.
Deserialize the object from the file and display the student details.
Handle FileNotFoundException, IOException, and ClassNotFoundException using exception handling.

code- 
import java.io.*;

// Student class implements Serializable interface
class Student implements Serializable {
    private int id;
    private String name;
    private double gpa;

    // Constructor
    public Student(int id, String name, double gpa) {
        this.id = id;
        this.name = name;
        this.gpa = gpa;
    }

    // Getter methods
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public double getGpa() {
        return gpa;
    }

    // toString method to display student details
    @Override
    public String toString() {
        return "Student ID: " + id + ", Name: " + name + ", GPA: " + gpa;
    }
}

public class StudentSerialization {

    public static void main(String[] args) {
        Student student = new Student(1, "John Doe", 3.85);

        // Serialize the object to a file
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("student.ser"))) {
            oos.writeObject(student);
            System.out.println("Student object has been serialized.");
        } catch (FileNotFoundException e) {
            System.out.println("Error: The file was not found.");
        } catch (IOException e) {
            System.out.println("Error: An I/O error occurred during serialization.");
        }

        // Deserialize the object from the file
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("student.ser"))) {
            Student deserializedStudent = (Student) ois.readObject();
            System.out.println("Deserialized Student object:");
            System.out.println(deserializedStudent);
        } catch (FileNotFoundException e) {
            System.out.println("Error: The file was not found.");
        } catch (IOException e) {
            System.out.println("Error: An I/O error occurred during deserialization.");
        } catch (ClassNotFoundException e) {
            System.out.println("Error: Class not found during deserialization.");
        }
    }
}

output-

Student object has been serialized.
Deserialized Student object:
Student ID: 22bcs10435 Name: Sahil, GPA: 10

2. Create a menu-based Java application with the following options. 1.Add an Employee 2. Display All 3. Exit If option 1 is selected, the application should gather details of the employee like employee name, employee id, designation and salary and store it in a file. If option 2 is selected, the application should display all the employee details. If option 3 is selected the application should exit.

input-
import java.io.*;
import java.util.*;

// Employee class implements Serializable interface
class Employee implements Serializable {
    private String name;
    private int id;
    private String designation;
    private double salary;

    // Constructor
    public Employee(String name, int id, String designation, double salary) {
        this.name = name;
        this.id = id;
        this.designation = designation;
        this.salary = salary;
    }

    // Getter methods
    public String getName() {
        return name;
    }

    public int getId() {
        return id;
    }

    public String getDesignation() {
        return designation;
    }

    public double getSalary() {
        return salary;
    }

    // toString method to display employee details
    @Override
    public String toString() {
        return "Employee ID: " + id + ", Name: " + name + ", Designation: " + designation + ", Salary: " + salary;
    }
}

public class EmployeeManagement {

    private static final String FILE_NAME = "employees.ser";

    // Method to add an employee to the file
    private static void addEmployee() {
        Scanner scanner = new Scanner(System.in);

        // Input employee details
        System.out.print("Enter Employee Name: ");
        String name = scanner.nextLine();
        System.out.print("Enter Employee ID: ");
        int id = scanner.nextInt();
        scanner.nextLine(); // Consume the newline
        System.out.print("Enter Designation: ");
        String designation = scanner.nextLine();
        System.out.print("Enter Salary: ");
        double salary = scanner.nextDouble();

        Employee employee = new Employee(name, id, designation, salary);

        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(FILE_NAME, true))) {
            oos.writeObject(employee);
            System.out.println("Employee has been added successfully.");
        } catch (IOException e) {
            System.out.println("Error: An I/O error occurred while adding the employee.");
        }
    }

    // Method to display all employees from the file
    private static void displayAllEmployees() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(FILE_NAME))) {
            System.out.println("\nEmployee Details:");
            while (true) {
                try {
                    Employee employee = (Employee) ois.readObject();
                    System.out.println(employee);
                } catch (EOFException e) {
                    break; // End of file reached
                } catch (ClassNotFoundException e) {
                    System.out.println("Error: Class not found during deserialization.");
                }
            }
        } catch (IOException e) {
            System.out.println("Error: An I/O error occurred while displaying employees.");
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int choice;

        // Display menu options until the user chooses to exit
        do {
            System.out.println("\nEmployee Management System");
            System.out.println("1. Add an Employee");
            System.out.println("2. Display All Employees");
            System.out.println("3. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    addEmployee();
                    break;
                case 2:
                    displayAllEmployees();
                    break;
                case 3:
                    System.out.println("Exiting the application.");
                    break;
                default:
                    System.out.println("Invalid choice! Please select a valid option.");
            }
        } while (choice != 3);

        scanner.close();
    }
}

output-
Employee Management System
1. Add an Employee
2. Display All Employees
3. Exit
Enter your choice: 1
Enter Employee Name:RAM
Enter Employee ID: 101
Enter Designation: Software Engineer
Enter Salary: 70000.0
Employee has been added successfully.

Employee Management System
1. Add an Employee
2. Display All Employees
3. Exit
Enter your choice: 1
Enter Employee Name:Shyam
Enter Employee ID: 102
Enter Designation: Data Analyst
Enter Salary: 65000.0
Employee has been added successfully.

Employee Management System
1. Add an Employee
2. Display All Employees
3. Exit
Enter your choice: 2

Employee Details:
Employee ID: 101, Name: Ram, Designation: Software Engineer, Salary: 70000.0
Employee ID: 102, Name: Shyam, Designation: Data Analyst, Salary: 65000.0

Employee Management System
1. Add an Employee
2. Display All Employees
3. Exit
Enter your choice: 3
Exiting the application.



